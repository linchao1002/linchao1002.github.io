<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linchao&#39;s Blog</title>
  
  <subtitle>身体和灵魂总要有一个在路上</subtitle>
  <link href="/linchao1002.github.io/atom.xml" rel="self"/>
  
  <link href="https://linchao1002.github.io/"/>
  <updated>2019-02-19T10:58:22.046Z</updated>
  <id>https://linchao1002.github.io/</id>
  
  <author>
    <name>Hou Linchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python面向对象</title>
    <link href="https://linchao1002.github.io/2019/01/23/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://linchao1002.github.io/2019/01/23/python面向对象/</id>
    <published>2019-01-23T12:14:49.000Z</published>
    <updated>2019-02-19T10:58:22.046Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><pre><code>                                    　　　　　　　　　　　　　　python面向对象知识</code></pre><h1 id="1、构造方法"><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a>1、构造方法</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="comment"># 后期除非定义单例类，否则基本不用写</span></span><br><span class="line">    <span class="comment"># 构造方法包括创建对象和初始化对象，在python当中，分为两步执行：先执行__new__方法，然后执行__init__方法；</span></span><br><span class="line">    <span class="comment"># __init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值。</span></span><br><span class="line">    <span class="comment"># __new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例，是个静态方法。</span></span><br><span class="line">    <span class="comment">#__new__在__init__之前被调用，__new__的返回值（实例）将传递给__init__方法的第一个参数，然后__init__给这个实例设置一些参数。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 调用父类中的__new__方法开辟内存空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(Person, cls).__new_<span class="number">_</span>(cls)</span><br><span class="line">           <span class="comment"># super() 函数是用于调用父类(超类)的一个方法。</span></span><br><span class="line">           <span class="comment"># self表示一个具体的实例本身。</span></span><br><span class="line">           <span class="comment"># cls表示这个类本身。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, height, weight)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 对象属性，只能对象调用</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 对象方法中可以调用对象属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is %s, I am %d years old"</span><span class="string">%(self.name, self.age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建对象时给每个对象的属性赋值</span></span><br><span class="line">per1 = Person(<span class="string">"lilei"</span>, <span class="number">20</span>, <span class="number">170</span>, <span class="number">80</span>)</span><br><span class="line">per2 = Person(<span class="string">"hanmeimei"</span>, <span class="number">18</span>, <span class="number">165</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">print(per1.name)</span><br><span class="line">print(per2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(Person.name) #类中没有name属性，且类名无法调用对象属性</span></span><br><span class="line"></span><br><span class="line">print(per1.say())</span><br><span class="line">print(per2.say())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延伸</span></span><br><span class="line"><span class="comment"># __new__()方法：是一个类方法，返回一个对象的实例，在使用类实例化对象时自动调用，目的是在堆区开辟一片内存空间，会在__init__之前调用</span></span><br><span class="line"><span class="comment"># 使用：创建单例类</span></span><br></pre></td></tr></table></figure><h1 id="2、访问限制"><a href="#2、访问限制" class="headerlink" title="2、访问限制"></a>2、访问限制</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="comment"># 在python中，变量名类似__xxxx__的，属于特殊变量，特殊变量时可以直接访问的，不是私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, height, weight, money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">        <span class="comment"># 在python中_xxx变量，这样的实例变量不是可以直接访问的。但是，按照约定俗成的规定，当看到这样的变量时，意思是虽然我可以被外部直接访问，但是请把我视为私有变量，不要在外部随意访问</span></span><br><span class="line">        <span class="keyword">self</span>._temp = <span class="number">2</span></span><br><span class="line">        <span class="comment"># 特殊变量</span></span><br><span class="line">        <span class="keyword">self</span>.__test_<span class="number">_</span> = <span class="number">1</span></span><br><span class="line">        <span class="comment">#如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线</span></span><br><span class="line">        <span class="comment">#python中，示例的变量以__开头，就变成了一个私有属性(private)，只能在内部访问，外部无法访问</span></span><br><span class="line">        <span class="comment">#不能再外部直接访问__money的原因是python解释器对外把__money属性改成了_Person__money。所以任然可以用_Person__money来直接访问，但是强烈建议不要这么做，因为不同版本的python解释器可能会把__money改成不同的属性名</span></span><br><span class="line">        <span class="keyword">self</span>.__money = money</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义公有方法间接访问私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__money</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">self</span>, money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> money &gt;= <span class="number">0</span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.__money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is %s, I am %d years old"</span><span class="string">%(self.name, self.age)</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> 实例属性与类属性：</span><br><span class="line">由于Python是动态语言，根据类创建的实例可以任意绑定属性。</span><br><span class="line">给实例绑定属性的方法是通过实例变量，或者通过<span class="keyword">self</span>变量：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">s = Student(<span class="string">'Bob'</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br><span class="line">但是，如果Student类本身需要绑定一个属性呢？可以直接在<span class="class"><span class="keyword">class</span>中定义属性，这种属性是类属性，归<span class="title">Student</span>类所有：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    name = <span class="string">'Student'</span></span><br><span class="line">当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</span><br></pre></td></tr></table></figure><h1 id="3、-property"><a href="#3、-property" class="headerlink" title="3、@property"></a>3、@property</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, height, weight, money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">        <span class="keyword">self</span>.__money = money</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#把一个getter方法变成属性，只需要加上<span class="doctag">@property</span>就可以了，此时，<span class="doctag">@property</span>本身又创建了另一个装饰器<span class="doctag">@score</span>.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作</span></span><br><span class="line">        </span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__money</span><br><span class="line">    @money.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(<span class="keyword">self</span>, value)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.__money = <span class="number">0</span></span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.__money = value</span><br><span class="line">    <span class="comment">#定义公有方法间接访问私有属性</span></span><br><span class="line">    <span class="comment"># def getMoney(self):</span></span><br><span class="line">    <span class="comment">#     return self.__money</span></span><br><span class="line">    <span class="comment"># def setMoney(self, money):</span></span><br><span class="line">    <span class="comment">#     if money &lt; 0:</span></span><br><span class="line">    <span class="comment">#         self.__money = 0</span></span><br><span class="line">    <span class="comment">#     else:</span></span><br><span class="line">    <span class="comment">#         self.__money = money</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is %s, I am %d years old"</span><span class="string">%(self.name, self.age)</span></span><br><span class="line"></span><br><span class="line">per = Person(<span class="string">"lilei"</span>, <span class="number">20</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------"</span>)</span><br><span class="line"><span class="comment">#想让访问私有属性的方式类似访问普通属性，需要使用<span class="doctag">@property</span></span></span><br><span class="line"><span class="comment">#让私有属性可以使用点语法</span></span><br><span class="line">print(per.money)  <span class="comment">#相当于执行money()</span></span><br><span class="line">per.money = -<span class="number">10</span>   <span class="comment">#相当于执行money(-10)</span></span><br><span class="line">print(per.money)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">-------------</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">只定义getter方法，不定义setter方法就是一个只读属性：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(<span class="keyword">self</span>, value)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._birth = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - <span class="keyword">self</span>._birth</span><br><span class="line">上面的birth是可读写属性，而age就是一个只读属性。</span><br></pre></td></tr></table></figure><h1 id="4、动态给实例添加属性与方法并使用slots槽"><a href="#4、动态给实例添加属性与方法并使用slots槽" class="headerlink" title="4、动态给实例添加属性与方法并使用slots槽"></a>4、动态给实例添加属性与方法并使用<strong>slots</strong>槽</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    __slots_<span class="number">_</span> = (<span class="string">"name"</span>, <span class="string">"age"</span>, <span class="string">"height"</span>, <span class="string">"weight"</span>, <span class="string">"money"</span>, <span class="string">"run"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, height, weight)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is %s, I am %d years old"</span><span class="string">%(self.name, self.age)</span></span><br><span class="line"></span><br><span class="line">per1 = Person(<span class="string">"lilei"</span>, <span class="number">20</span>, <span class="number">170</span>, <span class="number">80</span>)</span><br><span class="line">per2 = Person(<span class="string">"hanmeimei"</span>, <span class="number">18</span>, <span class="number">165</span>, <span class="number">50</span>)</span><br><span class="line">print(per1.say())</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化一个对象后，可以给对象绑定任何的属性和方法，这就是动态语言的灵活性</span></span><br><span class="line"><span class="comment">#如果属性不存在，则变为增加属性</span></span><br><span class="line">per1.money = <span class="number">100</span></span><br><span class="line">print(per1.money)</span><br><span class="line"><span class="comment">#增加方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    print(<span class="string">"run"</span>)</span><br><span class="line">from types import MethodType</span><br><span class="line">per1.run = MethodType(run, per1)</span><br><span class="line">per1.run()</span><br><span class="line"><span class="comment">#注意：给一个实例对象绑定的属性和方法对另一个实例对象没有影响</span></span><br><span class="line"><span class="comment"># print(per2.money)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需求：给所有的实例都绑定属性和方法</span></span><br><span class="line"><span class="comment">#解决：给类绑定就可以了</span></span><br><span class="line"><span class="comment">#注意：不仅仅给已存在的对象会绑定，未创建的对象也绑定了</span></span><br><span class="line">Person.faceValue = <span class="number">100</span>     <span class="comment">#增加属性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    print(<span class="string">"play"</span>)</span><br><span class="line">Person.play = play</span><br><span class="line">print(per1.faceValue, per2.faceValue)</span><br><span class="line">per1.play()</span><br><span class="line">per2.play()</span><br><span class="line">per3 = Person(<span class="string">"laowang"</span>, <span class="number">50</span>, <span class="number">167</span>, <span class="number">60</span>)</span><br><span class="line">print(per3.faceValue)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">my name is lilei, I am <span class="number">20</span> years old</span><br><span class="line"><span class="number">100</span></span><br><span class="line">run</span><br><span class="line"><span class="number">100</span> <span class="number">100</span></span><br><span class="line">play</span><br><span class="line">play</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#思考：想限制实例的属性，不让对象随意添加属性，只能添加我们规定一些属性</span></span><br><span class="line"><span class="comment">#解决：在定义类时，定义一个特殊属性__slots__，限制该类实例能添加的属性</span></span><br><span class="line"></span><br><span class="line">想要限制实例的属性怎么办？比如，只允许对Student实例添加name和age属性。</span><br><span class="line">为了达到限制的目的，Python允许在定义<span class="class"><span class="keyword">class</span>的时候，定义一个特殊的<span class="title">__slots__</span>变量，来限制该<span class="title">class</span>实例能添加的属性：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    __slots_<span class="number">_</span> = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">然后，我们试试：</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">AttributeError:</span> <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br><span class="line">由于<span class="string">'score'</span>没有被放到__slots_<span class="number">_</span>中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。</span><br><span class="line">使用__slots_<span class="number">_</span>要注意，__slots_<span class="number">_</span>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</span><br></pre></td></tr></table></figure><h1 id="5、单例"><a href="#5、单例" class="headerlink" title="5、单例"></a>5、单例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">单例：是一种软件设计模式，该模式的主要目的是确保一个类只有一个实例存在</span><br><span class="line"></span><br><span class="line">实现单例的方式：</span><br><span class="line">    <span class="number">1</span>、使用模块</span><br><span class="line">    <span class="number">2</span>、使用__new__</span><br><span class="line">    <span class="number">3</span>、使用装饰器</span><br><span class="line">    <span class="number">4</span>、使用元类</span><br><span class="line">    </span><br><span class="line"><span class="number">1</span>、使用模块</span><br><span class="line">card.py:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cardId, passwd, money)</span>:</span></span><br><span class="line">        self.cardId = cardId</span><br><span class="line">        self.passwd = passwd</span><br><span class="line">        self.money  = money</span><br><span class="line"></span><br><span class="line">c = Card(<span class="string">"888888"</span>, <span class="string">"666666"</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">main.py:</span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> card <span class="keyword">import</span> c</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">原理：python的模块就是天然的单例模式，因为模块的在第一次导入时，会产生.pyc文件，但第二次导入时，就会直接加载.pyc文件，而不会再执行模块代码。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、使用__new__</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 每一次实例化的时候，都只返回instance同一个对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"instance"</span>):   <span class="comment">#hasattr() 函数用于判断对象是否包含对应的属性。</span></span><br><span class="line">            cls.instance = super(Card, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">card1 = Card()</span><br><span class="line">card1.passwd = <span class="string">"666666"</span></span><br><span class="line">card2 = Card()</span><br><span class="line">print(card2.passwd)</span><br><span class="line">print(card1 <span class="keyword">is</span> card2)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="number">666666</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、使用装饰器</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">            <span class="comment"># self表示一个具体的实例本身。</span></span><br><span class="line">            <span class="comment"># cls表示这个类本身。</span></span><br><span class="line">            <span class="comment">#判断一个变量是否是某个类型可以用isinstance()判断：   isinstance(b, Animal)</span></span><br><span class="line">    <span class="comment">#  isinstance(a, list)</span></span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c1 = Card()</span><br><span class="line">c2 = Card()</span><br><span class="line">print(c1 <span class="keyword">is</span> c2)</span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line">print(p1 <span class="keyword">is</span> p2)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、使用元类</span><br></pre></td></tr></table></figure><h1 id="6、重写repr与str函数"><a href="#6、重写repr与str函数" class="headerlink" title="6、重写repr与str函数"></a>6、重写<strong>repr</strong>与<strong>str</strong>函数</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="comment">#重写：将继承的方法重写写一遍，在原有的功能基础上添加一些新的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, height, weight)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is %s, I am %d years old"</span><span class="string">%(self.name, self.age)</span></span><br><span class="line">    <span class="comment">#需求：打印该类型的对象时，想打印出对象的各个属性值</span></span><br><span class="line">    <span class="comment">#解决：重写__str__方法</span></span><br><span class="line">    <span class="comment">#__str__()方法：在调用print打印对象时自动调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#是显示给用户的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:%s\nage:%d\nheight:%.2f\nweight:%.2f"</span><span class="string">%(self.name, self.age, self.height, self.weight)</span></span><br><span class="line">    <span class="comment">#是给机器用的，在python解释器里直接敲对象后回车自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:%s\nage:%d\nheight:%.2f\nweight:%.2f"</span><span class="string">%(self.name, self.age, self.height, self.weight)</span></span><br><span class="line"></span><br><span class="line">per = Person(<span class="string">"lilei"</span>, <span class="number">20</span>, <span class="number">170</span>, <span class="number">80</span>)</span><br><span class="line">print(per)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="symbol">name:</span>lilei</span><br><span class="line"><span class="symbol">age:</span><span class="number">20</span></span><br><span class="line"><span class="symbol">height:</span><span class="number">170.00</span></span><br><span class="line"><span class="symbol">weight:</span><span class="number">80.00</span></span><br><span class="line"></span><br><span class="line">__str_<span class="number">_</span>()返回用户看到的字符串，而__repr_<span class="number">_</span>()返回程序开发者看到的字符串，也就是说，__repr_<span class="number">_</span>()是为调试服务的。</span><br><span class="line">解决办法是再定义一个__repr_<span class="number">_</span>()。但是通常__str_<span class="number">_</span>()和__repr_<span class="number">_</span>()代码都是一样的，所以，有个偷懒的写法：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Student object (name=%s)'</span> % <span class="keyword">self</span>.name</span><br><span class="line">    __repr_<span class="number">_</span> = __str_<span class="number">_</span></span><br></pre></td></tr></table></figure><h1 id="7、继承"><a href="#7、继承" class="headerlink" title="7、继承"></a>7、继承</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="comment">#定义类属性</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,a,w)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = n</span><br><span class="line">        <span class="keyword">self</span>.age = a</span><br><span class="line">        <span class="keyword">self</span>.__weight = w</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"%s 说: 我 %d 岁。"</span> <span class="string">%(self.name,self.age)</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>(<span class="title">people</span>):</span></span><br><span class="line">    grade = <span class="string">''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,a,w,g)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init_<span class="number">_</span>(<span class="keyword">self</span>,n,a,w)</span><br><span class="line">        <span class="keyword">self</span>.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="string">%(self.name,self.age,self.grade)</span>)</span><br><span class="line"> </span><br><span class="line">s = student(<span class="string">'ken'</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">3</span>)</span><br><span class="line">s.speak()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">ken 说: 我 <span class="number">10</span> 岁了，我在读 <span class="number">3</span> 年级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,a,w)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = n</span><br><span class="line">        <span class="keyword">self</span>.age = a</span><br><span class="line">        <span class="keyword">self</span>.__weight = w</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"%s 说: 我 %d 岁。"</span> <span class="string">%(self.name,self.age)</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>(<span class="title">people</span>):</span></span><br><span class="line">    grade = <span class="string">''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,a,w,g)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init_<span class="number">_</span>(<span class="keyword">self</span>,n,a,w)</span><br><span class="line">        <span class="keyword">self</span>.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="string">%(self.name,self.age,self.grade)</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">speaker</span>():</span></span><br><span class="line">    topic = <span class="string">''</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,t)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = n</span><br><span class="line">        <span class="keyword">self</span>.topic = t</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"我叫 %s，我是一个演说家，我演讲的主题是 %s"</span><span class="string">%(self.name,self.topic)</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多重继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sample</span>(<span class="title">speaker</span>,<span class="title">student</span>):</span></span><br><span class="line">    a =<span class="string">''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n,a,w,g,t)</span></span><span class="symbol">:</span></span><br><span class="line">        student.__init_<span class="number">_</span>(<span class="keyword">self</span>,n,a,w,g)</span><br><span class="line">        speaker.__init_<span class="number">_</span>(<span class="keyword">self</span>,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">"Tim"</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">"Python"</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中排前地父类的方法</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">我叫 Tim，我是一个演说家，我演讲的主题是 Python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类的专有方法：</span><br><span class="line">__init_<span class="number">_</span> : 构造函数，在生成对象时调用</span><br><span class="line">__del_<span class="number">_</span> : 析构函数，释放对象时使用</span><br><span class="line">__repr_<span class="number">_</span> : 打印，转换</span><br><span class="line">__setitem_<span class="number">_</span> : 按照索引赋值</span><br><span class="line"><span class="symbol">__getitem__:</span> 按照索引获取值</span><br><span class="line"><span class="symbol">__len__:</span> 获得长度</span><br><span class="line"><span class="symbol">__cmp__:</span> 比较运算</span><br><span class="line"><span class="symbol">__call__:</span> 函数调用</span><br><span class="line"><span class="symbol">__add__:</span> 加运算</span><br><span class="line"><span class="symbol">__sub__:</span> 减运算</span><br><span class="line"><span class="symbol">__mul__:</span> 乘运算</span><br><span class="line"><span class="symbol">__div__:</span> 除运算</span><br><span class="line"><span class="symbol">__mod__:</span> 求余运算</span><br><span class="line"><span class="symbol">__pow__:</span> 乘方</span><br></pre></td></tr></table></figure><h1 id="8、MRO"><a href="#8、MRO" class="headerlink" title="8、MRO"></a>8、MRO</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'''</span><br><span class="line">概念：方法解析顺序，是python中用于处理二义性问题的算法</span><br><span class="line"></span><br><span class="line">二义性：</span><br><span class="line"><span class="code">    问题一：有两个基类A和B，A和B都定义了f()方法，C继承A和B，那么调用C的f()方法时会出现不确定性</span></span><br><span class="line"><span class="code">    问题二：有一个基类A，定义了方法f()，B类和C类都继承自A类，D类继承了B类和C类，此时出现一个问题，D类不知道该继承B的f()还是C的f()</span></span><br><span class="line"></span><br><span class="line">C++解决二义性：</span><br><span class="line"><span class="code">    问题1：通过同名覆盖的方法解决的</span></span><br><span class="line"><span class="code">    问题2：通过虚继承来解决</span></span><br><span class="line"></span><br><span class="line">python解决二义性：</span><br><span class="line"><span class="code">    通过C3算法避免二义性的情况</span></span><br><span class="line"></span><br><span class="line">经历的过程：</span><br><span class="line"><span class="code">    1、python2.2以前的版本（经典类时代）</span></span><br><span class="line"><span class="code">    2、python2.2版本（新式类诞生）</span></span><br><span class="line"><span class="code">    3、python2.3到python2.7（经典类、新式类和平发展）</span></span><br><span class="line"><span class="code">    4、python3至今（新式类一统江山）</span></span><br><span class="line"></span><br><span class="line">''<span class="emphasis">'1、python2.2以前的版本（经典类时代）</span></span><br><span class="line"><span class="emphasis">#特性：经典类是一种没有继承的类，对象类型都是type类型，如果经典类被作为父类，子类调用父类的构造函数时会出错</span></span><br><span class="line"><span class="emphasis"># class A:</span></span><br><span class="line"><span class="emphasis">#     pass</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'</span>'<span class="emphasis">'</span></span><br><span class="line"><span class="emphasis">mro的方法为深度优先算法(DFS):</span></span><br><span class="line"><span class="emphasis">1、把根阶段压入栈中</span></span><br><span class="line"><span class="emphasis">2、每次从栈中弹出一个元素，搜索所有它下一级的元素，把这些元素压入栈中。并把这个元素记为它下一级元素的前驱</span></span><br><span class="line"><span class="emphasis">3、找到所有的元素时结束程序</span></span><br><span class="line"><span class="emphasis">4、如果遍历整个树还没有找到，程序结束</span></span><br><span class="line"><span class="emphasis">'</span>'<span class="emphasis">'</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">#查看经典类的MRO顺序</span></span><br><span class="line"><span class="emphasis">import inspect</span></span><br><span class="line"><span class="emphasis">class D:</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class C(D):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class B(D):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class A(B, C):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">print(inspect.getmro(A))</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'</span>'<span class="emphasis">'</span></span><br><span class="line"><span class="emphasis">第一种：正常继承模式，两个互不相关的类的多继承，这种请求DFS顺序正常的，没有引起任何问题</span></span><br><span class="line"><span class="emphasis">第二种：菱形继承模式，存在公共父类D类的多继承，这种情况DFS必须经过公共父类（D），如果公共父类D中有一些初始化属性和方法，但是子类C有重写了这些属性和方法，那么按照DFS的顺序必定是先找到D的属性和方法，那么C的属性或方法将永远用不到，导致C只能继承无法重写。</span></span><br><span class="line"><span class="emphasis">'</span>'<span class="emphasis">'</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> 2、python2.2版本（新式类诞生）</span></span><br><span class="line"><span class="emphasis">#新式类特性：为了是类和内置类型更加统一，引入新式类。新式类的每个类都继承于一个基类，可以是自定义的类或者其他类，默认是object。子类可以调用父类的构造函数</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># 新式类代码查看mro顺序</span></span><br><span class="line"><span class="emphasis">class D(object):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class C(D):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class B(D):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class A(B, C):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">print(A.__mro__)</span></span><br><span class="line"><span class="emphasis">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="emphasis">(&lt;class '</span>_<span class="emphasis">_main_</span><span class="emphasis">_.A'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.B'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.C'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.D'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis">两种MRO算法</span></span><br><span class="line"><span class="emphasis">    如果是经典类使用DFS</span></span><br><span class="line"><span class="emphasis">    如果是新式类使用BFS(广度优化算法)</span></span><br><span class="line"><span class="emphasis">        1、把根节点放到队列末尾</span></span><br><span class="line"><span class="emphasis">        2、每次从队列的头部取一个元素，搜索所有它下一级的元素，把这些元素放到队列的末尾，并把这个元素记为它下一级元素的前驱。</span></span><br><span class="line"><span class="emphasis">        3、找到所有的元素时结束程序</span></span><br><span class="line"><span class="emphasis">        4、如果遍历整个树还没有找到，程序结束  </span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis">第一种：看起来正常，但实际上感觉别扭，比如B继承D的f()函数，恰巧C中页实现了f()函数，那么BFS顺序先访问B然后在访问C，f()函数会选择C的，这种应该先从B和B的父类开始找才是正确的顺序，称为单调性</span></span><br><span class="line"><span class="emphasis">第二种：菱形模式下BFS解决了DFS查找顺序的问题，但是它也违背了单调性</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3、python2.3到python2.7（经典类、新式类和平发展）</span></span><br><span class="line"><span class="emphasis">特性：在之前的BFS算法存在很大的问题，从python2.3开始新式类的MRO算法使用了C3算法，C3算法解决了单调性问题和只能继承无法重写的问题</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">4、python3至今（新式类一统江山）</span></span><br><span class="line"><span class="emphasis"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">class D(object):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class E(object):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class F(object):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class C(D, F):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class B(E, D):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">class A(B, C):</span></span><br><span class="line"><span class="emphasis">    pass</span></span><br><span class="line"><span class="emphasis">print(A._</span><span class="emphasis">_mro_</span><span class="emphasis">_)</span></span><br><span class="line"><span class="emphasis">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="emphasis">(&lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.A'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.B'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.E'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.C'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.D'&gt;, &lt;class '_</span><span class="emphasis">_main_</span><span class="emphasis">_.F'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Process finished with exit code 0</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis">解决的问题</span></span><br><span class="line"><span class="emphasis">    1、单调性问题</span></span><br><span class="line"><span class="emphasis">    2、不能重写的问题</span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis">拓扑排序：</span></span><br><span class="line"><span class="emphasis">    对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序</span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'''抽象模拟</span></span><br><span class="line"><span class="emphasis">    首先找入读为 0 的点，只有一个A，把A拿出来，把A相关的边剪切掉，再找入度点为0的点，有两个(B、C)，根据最左侧原则，拿B，此时的顺序AB，剪切B相关的边。此时入度点为0的点有E和C。取最左侧是E，此时排序为ABE，剪切E的相关边。此时只有一个入度点为0的点为C，取C,此时顺序为ABEC，剪切C相关的边得到两个入度点为0的点（D、F），取最左侧的D点，此时顺序为ABECD，剪切D相关的边，此时只剩下F的入度点为0了，取F，此时顺序为ABECDF，再裁剪相关边，最后一个入度点为0的点为object，再去object，此时顺序为ABECDFobject</span></span><br><span class="line"><span class="emphasis">'''</span></span><br></pre></td></tr></table></figure><h1 id="9、栈和队列"><a href="#9、栈和队列" class="headerlink" title="9、栈和队列"></a>9、栈和队列</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf-8 -*-</span></span><br><span class="line">'''</span><br><span class="line"><span class="meta">#栈</span></span><br><span class="line"><span class="meta">#特点：先进后出</span></span><br><span class="line">mystack = []</span><br><span class="line"><span class="meta">#压栈</span></span><br><span class="line">mystack.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.append(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.append(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.append(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line"><span class="meta">#出栈</span></span><br><span class="line">mystack.<span class="keyword">pop</span>()</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.<span class="keyword">pop</span>()</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.<span class="keyword">pop</span>()</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">mystack.<span class="keyword">pop</span>()</span><br><span class="line"><span class="keyword">print</span>(mystack)</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line"><span class="meta">#队列</span></span><br><span class="line"><span class="meta">#特点：先进先出</span></span><br><span class="line">from collections import deque</span><br><span class="line">queue = deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">#进队</span></span><br><span class="line">queue.append(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span>(queue)</span><br><span class="line">queue.append(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">print</span>(queue)</span><br><span class="line"><span class="meta">#出队</span></span><br><span class="line"><span class="keyword">print</span>(queue.popleft())</span><br><span class="line"><span class="keyword">print</span>(queue)</span><br><span class="line"><span class="keyword">print</span>(queue.popleft())</span><br><span class="line"><span class="keyword">print</span>(queue)</span><br></pre></td></tr></table></figure><h1 id="10、运算符重载"><a href="#10、运算符重载" class="headerlink" title="10、运算符重载"></a>10、运算符重载</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, a, b)</span></span><span class="symbol">:</span></span><br><span class="line">      <span class="keyword">self</span>.a = a</span><br><span class="line">      <span class="keyword">self</span>.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Vector (%d, %d)'</span> % (<span class="keyword">self</span>.a, <span class="keyword">self</span>.b)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(<span class="keyword">self</span>,other)</span></span><span class="symbol">:</span></span><br><span class="line">      <span class="keyword">return</span> Vector(<span class="keyword">self</span>.a + other.a, <span class="keyword">self</span>.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line">print (v1 + v2)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">Vector(<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;pre&gt;&lt;code&gt;                                    　　　　　　　　　　　　　　python面向对象知识
&lt;
      
    
    </summary>
    
      <category term="python" scheme="https://linchao1002.github.io/categories/python/"/>
    
    
      <category term="python3" scheme="https://linchao1002.github.io/tags/python3/"/>
    
      <category term="面向对象" scheme="https://linchao1002.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Next 主题添加分享功能</title>
    <link href="https://linchao1002.github.io/2019/01/23/2019-1-24%20Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD%20121259/"/>
    <id>https://linchao1002.github.io/2019/01/23/2019-1-24 Next主题添加分享功能 121259/</id>
    <published>2019-01-23T12:14:49.000Z</published>
    <updated>2019-02-19T09:47:36.092Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h1 id="Next主题添加分享功能"><a href="#Next主题添加分享功能" class="headerlink" title="Next主题添加分享功能"></a>Next主题添加分享功能</h1><ol><li><p>next主题自带的jiathis分享功能（2018年4月已停止 <a href="http://www.lwd3699.com/keji/1564.html）" target="_blank" rel="noopener">http://www.lwd3699.com/keji/1564.html）</a></p><p>打开主next主题配置文件_config.yml ,搜索jiathis,改为true即可</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Warning: JiaThis does not support https.(不支持https)</span><br><span class="line">jiathis: true</span><br><span class="line">  ##uid: Get this uid <span class="keyword">from</span> http:<span class="comment">//www.jiathis.com/</span></span><br></pre></td></tr></table></figure></li><li><p>next主题自带的百度分享功能：</p><p>参考链接：<a href="https://asdfv1929.github.io/2018/05/25/baidu-share/" target="_blank" rel="noopener">https://asdfv1929.github.io/2018/05/25/baidu-share/</a></p><p>打开主next主题配置文件_config.yml ,搜索baidushare,添加如下配置（其中 type 亦可以选择 slide)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidushare:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">button</span>    </span><br><span class="line"><span class="attr">  baidushare:</span> <span class="literal">true</span> <span class="comment">#新增</span></span><br></pre></td></tr></table></figure><p>由于baidushare不支持https，解决方法便是，将<code>static</code>文件夹解压保存至<code>themes\next\source</code>目录下 。</p><p>static文件链接： <a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">https://github.com/hrwhisper/baiduShare</a></p><p>修改文件：<code>themes\next\layout_partials\share\baidushare.swig</code></p><p>将文件 <strong>末尾</strong> 部分的代码进行修改：</p></li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.src='http://bdimg.share.baidu.com/static/api/js/share.js?v=<span class="number">89860593</span>.js?cdnversion='+<span class="symbol">~(-new Date()/36e5)]</span>;</span><br></pre></td></tr></table></figure><pre><code>改为：</code></pre><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.src='/static/api/js/share.js?v=<span class="number">89860593</span>.js?cdnversion='+<span class="symbol">~(-new Date()/36e5)]</span>;</span><br></pre></td></tr></table></figure><p>最后重新生成下，就能展示分享功能了。</p><ol start="3"><li><p>NexT主题添加ShareSDK的分享：</p><p>传送门 ：<a href="https://blog.csdn.net/Captain_Magicer/article/details/54413833" target="_blank" rel="noopener">ShareSDK</a></p></li></ol><p>​</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Next主题添加分享功能&quot;&gt;&lt;a href=&quot;#Next主题添加分享功能&quot; class=&quot;headerlink&quot; title=&quot;Nex
      
    
    </summary>
    
      <category term="Hexo" scheme="https://linchao1002.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linchao1002.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://linchao1002.github.io/tags/Next/"/>
    
      <category term="ShareSDK分享" scheme="https://linchao1002.github.io/tags/ShareSDK%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Next 主题添加站内搜索功能</title>
    <link href="https://linchao1002.github.io/2019/01/23/Next%20%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>https://linchao1002.github.io/2019/01/23/Next 主题添加站内搜索功能/</id>
    <published>2019-01-23T12:14:49.000Z</published>
    <updated>2019-02-19T09:48:10.805Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h1 id="Next-主题添加站内搜索功能"><a href="#Next-主题添加站内搜索功能" class="headerlink" title="Next 主题添加站内搜索功能"></a>Next 主题添加站内搜索功能</h1><p>详细请看：<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">https://github.com/wzpan/hexo-generator-search</a></p><ul><li>安装 <code>hexo-generator-searchdb</code>, 站点根目录执行以下命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb  <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>编辑 <code>站点配置文件</code>, 新增以下内容到任意位置</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">    path:</span> search.xml</span><br><span class="line"><span class="symbol">    field:</span> post</span><br><span class="line"><span class="symbol">    format:</span> html</span><br><span class="line"><span class="symbol">    limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>编辑 <code>主题配置文件</code>, 启用本地搜索功能</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>如果出现点击搜索一直停留在加载状态，可能是文件编码问题，可以在本地测试时访问根目录下 <code>search.xml</code> 文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhos<span class="variable">t:4000</span>/<span class="built_in">search</span>.xml</span><br></pre></td></tr></table></figure><p>查看报错信息</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Next-主题添加站内搜索功能&quot;&gt;&lt;a href=&quot;#Next-主题添加站内搜索功能&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Hexo" scheme="https://linchao1002.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linchao1002.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://linchao1002.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析基础知识</title>
    <link href="https://linchao1002.github.io/2019/01/23/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://linchao1002.github.io/2019/01/23/数据分析/</id>
    <published>2019-01-23T12:14:49.000Z</published>
    <updated>2019-02-19T09:47:50.236Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:17 GMT+0800 (GMT+08:00) --><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="1-工具"><a href="#1-工具" class="headerlink" title="1.工具"></a>1.工具</h2><p><strong>Jupyter Notebook</strong></p><p>运行命令 ：jupyter notebook</p><p>快捷键：</p><ul><li><strong>Enter</strong> : 转入编辑模式</li><li><strong>Shift-Enter</strong> : 运行本单元，选中下个单元</li><li><strong>Ctrl-Enter</strong> : 运行本单元</li><li><strong>Alt-Enter</strong> : 运行本单元，在其下插入新单元</li><li><strong>A</strong> : 在上方插入新单元</li></ul><ul><li><strong>B</strong> : 在下方插入新单元</li><li><strong>D,D</strong> : 删除选中的单元</li><li><strong>Tab</strong> : 代码补全或缩进</li><li><strong>M</strong> ： 单元转入markdown状态</li><li><strong>shift-Tab</strong> : 提示</li><li>Ctrl-A ：全选</li><li>Ctrl -Z : 复原<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">time</span></span>      运行计时,耗时长的代码</span><br><span class="line"><span class="tag">%<span class="selector-tag">timeit</span></span>   (准确点)，耗时短的代码</span><br><span class="line"><span class="tag">%<span class="selector-tag">matoplotlib</span></span>   数据可视化</span><br><span class="line"></span><br><span class="line"><span class="tag">%<span class="selector-tag">who</span></span>       快速查看当前会话的所有变量与函数</span><br><span class="line"><span class="tag">%<span class="selector-tag">who_ls</span></span>     返回一个列表，，函数 </span><br><span class="line"><span class="tag">%<span class="selector-tag">lsmagic</span></span>    列出所有魔法命令</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-numpy"><a href="#2-numpy" class="headerlink" title="2.numpy"></a>2.numpy</h2><ul><li><p>导入库</p><p>import numpy as np</p></li><li><p>创建ndarray</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">   <span class="string">"- numpy默认ndarray的所有元素的类型是相同的"</span>,</span><br><span class="line">   <span class="string">"- 如果传进来的列表中包含不同的类型，则统一为同一类型，优先级str&gt;float&gt;int"</span></span><br><span class="line">   </span><br><span class="line">    data  =  [1,2,3,4]</span><br><span class="line">   <span class="built_in"> nd </span>= np.array(data)</span><br><span class="line">   <span class="built_in"> nd </span></span><br><span class="line">    </span><br><span class="line">    nd.dtype : 数据分析，分析的是什么类型的数据</span><br><span class="line">    nd.shape :  数据形状</span><br></pre></td></tr></table></figure><ul><li><p>数据可视化包</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib <span class="keyword">inline</span></span><br><span class="line"></span><br><span class="line">plt.imread()</span><br><span class="line">plt.imshow()</span><br></pre></td></tr></table></figure></li><li><p>np.ones() ,np.zeros() ,np.full( fill_value) fill_value 填值</p><p>np.reshape() 重新定义形状，给数组一个新的形状而不改变其数据</p><p>np.eye() 矩阵 单元矩阵</p><p>numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</p><p>在指定的间隔内返回均匀间隔的数字。</p><p>np.arange( )</p><p>np.random.randint(a, b, size=(c, d)) #指定生成随机数范围和生成的多维数组大小</p><p>np.random.randn(d0, d1, …, dn) 标准正太分布 ,数据就是两边低中间高的数据</p><p>np.random.normal(mean,stdev,size) 给出均值为mean，标准差为stdev的高斯随机数（场），当size赋值时，例如：size=100，表示返回100个高斯随机数</p><p>np.random.random() 生成0到1的随机数，左闭右开</p><p>astype( “uint8”) 将数据转换成uint8</p></li></ul><h2 id="3-ndarray的属性与基本操作"><a href="#3-ndarray的属性与基本操作" class="headerlink" title="3.ndarray的属性与基本操作"></a>3.ndarray的属性与基本操作</h2><ul><li><p>4个必记参数 ： ndim维度 shape形状(各种维度的长度) size总长度 dtype 元素类型</p></li><li><p>索引 ：一维与列表完全一致，多维时同理</p><p>nd[1] nd[1,1]</p><p>根据索引修改数据 nd[2,2] =1000</p></li><li><p>切片 ： 一维与列表完全一致，多维时同理</p><p>广播机制 ： 如果赋值的数据不充分的话，会自动填充</p></li><li><p>变形 ： 使用reshape函数，注意参数是一个tuple</p></li><li><p><strong>级联</strong></p><p>np.concatenate() 级联的参数是一个列表，一定要加中括号或者小括号</p><p>​ 维度必须相同 ，形状相符</p><p>​ <strong>级联的方向默认是shape这个tuple的第一个值所代表的维度方向</strong></p><p>​ <strong>可通过axis 参数改变级联的方向</strong></p><p>np.hstack 水平级联 二维变一维</p><p>np.vstack 垂直级联 一维变二维</p></li><li><p>切分</p><p>np.split np.vsplit np.hsplit</p></li><li><p>ndarray 聚合操作</p><p>axis参数：<br>当axis=0时，对列进行聚合操作；<br>当axis=1时，对行进行聚合操作。<br>求和np.sum： np.sum和np.nansum的区别 nan not a number</p><p>最大最小值np.max/np.min:</p><p>平均值np.mean：</p></li><li><p>矩阵操作</p><h5 id="ndarray的矩阵操作"><a href="#ndarray的矩阵操作" class="headerlink" title="ndarray的矩阵操作"></a>ndarray的矩阵操作</h5><p>广播机制：</p><ul><li>规则一：为缺失的维度补1(维度只能相差1)</li><li>规则二：缺失元素用已有元素补充</li><li>规则三：缺失维度的矩阵只能有一行或者一列</li><li>​</li></ul><p>算数运算 np.add(a+b) / a+b</p><p>矩阵积 np.dot()</p></li><li><h5 id="ndarray排序"><a href="#ndarray排序" class="headerlink" title="ndarray排序"></a>ndarray排序</h5><p>1.快速排序：<br>np.sort()与ndarray.sort()都可以，但有区别：<br>np.sort()不改变输入<br>ndarray.sort()本地处理，不占用空间，但改变输</p><p>2.部分排序：<br>np.partition(a,k)<br>有的时候我们不是对全部数据感兴趣，我们可能只对最小或最大的一部分感兴趣。<br>当k为正时，我们想要得到最小的k个数 , 当k为负时，我们想要得到最大的k个数：</p></li></ul><h2 id="4-cv2-人脸更换"><a href="#4-cv2-人脸更换" class="headerlink" title="4 cv2   人脸更换"></a>4 cv2 人脸更换</h2><ul><li><p>opencv : 计算机视觉库</p></li><li><p>终端下载 : pip install opencv_python</p></li><li><p>cv2在读的时候采用的是<strong>BGR</strong></p></li><li><p>例子 ：</p></li><li><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sanpang = cv2.imread(<span class="string">"./cv2_change_head/j.jpg"</span>)</span><br><span class="line"><span class="section">plt.imshow(sanpang[::,::,::-1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CascadeClassifier:用来处理算法的类</span></span><br><span class="line">cascade = cv2.CascadeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载现成的算法</span></span><br><span class="line">cascade.load('./cv2_change_head/haarcascade_frontalface_default.xml')</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用人脸识别的类进行识别</span></span><br><span class="line">face = cascade.detectMultiScale(sanpang)</span><br><span class="line">face</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-pandas的数据结构"><a href="#5-pandas的数据结构" class="headerlink" title="5. pandas的数据结构"></a>5. pandas的数据结构</h2><p>导入 import pandas as pd</p><p>​ import pandas import Series ,DataFrame</p><p><strong>Series</strong></p><p>​ Series 是一种类似与一维数组的对象，由两个部分组成：</p><ul><li><p>values 一组数据(ndarray 类型)</p></li><li><p>index 相关的数据索引标签</p></li></ul><p>1.创建Series (一一对应，不能多也不能少 （索引和value值）)</p><p>​ (1) 由列表或numpy数组创建 ，默认索引为 0 – N-1的整数型索引</p><p>​ 例： s = Series([1,2,4])</p><p>​ s= Series(np.aarray([1,2,3]), index=list(“abc”))</p><p>​ (2) 由字典创建 (指定索引可多可少，多得情况补上NaN)</p><p>​ s = Series (data ={“a”:10,”b”:22,”c”:33},index ={“a”,”pi”,”c”}</p><p>2 .Series的索引和切片</p><p>​ 可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里一个列表取多 个索引（此时返回的仍然是一个Series类型）。分为显示索引和隐式索引：</p><p>(1) 显式索引：</p><pre><code>- 使用index中的元素作为索引值- 使用.loc[]（推荐）</code></pre><p>注意，此时是闭区间</p><p>​ (2) 隐式索引：</p><pre><code>- 使用整数作为索引值- 使用.iloc[]（推荐）</code></pre><p>注意，此时是半开区间</p><p>​ 3 .Series 的基本概念</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) 可以把Series看成一个定长的有序字典</span><br><span class="line"></span><br><span class="line">       (<span class="number">2</span>)可以通过shape，size，index,values等得到series的属性</span><br><span class="line"></span><br><span class="line">       (<span class="number">3</span>)可以通过head()  ,  tail()快速查看Series对象的样式</span><br><span class="line">           data.head()  参数可以设置数量</span><br><span class="line">           data.tail()</span><br><span class="line">                    </span><br><span class="line">       (<span class="number">4</span>)当索引没有对应的值时，可能出现缺失数据显示NaN（not a number）的情况</span><br><span class="line"></span><br><span class="line">       (<span class="number">5</span>) 可以使用pd.isnull()，pd.notnull()，或自带isnull(),notnull()函数检测缺失数据                </span><br><span class="line">       </span><br><span class="line">        #通过isnull这个函数获取boolean数据的值， 可以把它当成一个检索</span><br><span class="line">        会取出为True的数据，也就是空值， 对空值进行赋值</span><br><span class="line">        例子：   ind = s.isnull()</span><br><span class="line">                s[ind] = np.nan</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">        (<span class="number">6</span>)Series对象本身及其实例都有一个name属性</span><br><span class="line">        s = Series(data = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size = <span class="number">5</span>), index = [<span class="string">"张三"</span>,<span class="string">"李                    四"</span>,<span class="string">"Sara"</span>,<span class="string">"Lisa"</span>,<span class="string">"Michael"</span>]</span><br><span class="line">        )</span><br><span class="line">        s.name = <span class="string">"Python"</span></span><br><span class="line">        s</span><br></pre></td></tr></table></figure><p>​</p><p>4 .Series 的运算</p><p>​ (1) 适用于numpy的数组运算也适用于Series</p><p>​ 加减乘除 ： add subtract multiply divide</p><p>​ (2) series之间的运算 ： 运算中自动对齐不同索引的数据</p><p>​ 如果索引不对应，补NaN</p><p>​ 要想保留所有的index,则需要使用 .add()函数</p><p>二 .<strong>DataFrame</strong></p><p>​ DataFrame是一个【表格型】的数据结构，可以看做是【由Series组成的字典】（共用同一个 索引）。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。DataFrame既有行索引，也有列索引。</p><ul><li>行索引：index</li><li>列索引：columns</li><li>值：values（numpy的二维数组）</li></ul><ol><li>创建</li></ol><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df1 = <span class="symbol">DataFrame</span>(&#123;<span class="string">'Python'</span>:[<span class="number">99</span>,<span class="number">101</span>,<span class="number">120</span>,<span class="number">78</span>],</span><br><span class="line">                 <span class="string">"数学"</span>:[<span class="number">120</span>,<span class="number">136</span>,<span class="number">141</span>,<span class="number">129</span>],</span><br><span class="line">                <span class="string">"语文"</span>:[<span class="number">123</span>,<span class="number">114</span>,<span class="number">130</span>,<span class="number">117</span>]&#125;, index = list(<span class="string">"abcd"</span>),</span><br><span class="line">               columns = [<span class="string">"Python"</span>,<span class="string">"数学"</span>,<span class="string">"语文"</span>,<span class="string">"英语"</span>])</span><br><span class="line">df1</span><br><span class="line">行还是一对一的， 列可多可少</span><br></pre></td></tr></table></figure><p>2 .DataFrame属性</p><p>​ values , columns , index , shape</p><p>3 . DataFrame的索引</p><p>​ (1) 对列进行索引</p><pre><code>- 通过类似字典的方式   df2[&quot;python&quot;]         两列数据： df2[[&quot;Python&quot;,&quot;php&quot;]]- 通过属性的方式 - 列切片是不行的</code></pre><p>可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且name属性也已经设置好了，就是相应的列名。</p><p>​</p><p>​ (2) 对行进行索引</p><p>​ <strong><em>#行索引不能使用中括号！！！！！！</em></strong></p><pre><code>- 使用.ix[]来进行行索引- 使用.loc[]加index来进行行索引   #对行数据进行切片, 左闭右闭    df2.loc[&quot;a&quot;:&quot;b&quot;]- 使用.iloc[]加整数来进行行索引    df2.iloc[0:3]   #左闭右开的情况   #loc全部是左闭右闭   在切片的时候 iloc全部是左闭右开的 </code></pre><p>同样返回一个Series，index为原来的columns。</p><p>​ (3) 对元素索引的方法</p><pre><code>- 使用列索引- 使用行索引(iloc[3,1]相当于两个参数;iloc[[3,3]] 里面的[3,3]看做一个参数)- 使用values属性（二维numpy数组）</code></pre><p>​ df2.loc[“a”,”Java”]#总结：进行元素索引的时候，老老实实的行是行，列是列</p><p>【注意】直接用中括号时：</p><ul><li>索引表示的是列索引</li><li>切片表示的是行切片</li></ul><p>4 .DataFrame之间的运算</p><p>（1） DataFrame之间的运算</p><p>同Series一样：</p><ul><li>在运算中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li><li>例： df1.add(df2, fill_value=0) fill_value 添值</li></ul><p>（2） Series与DataFrame之间的运算<strong><em>（注意axis 轴）</em></strong></p><p>【重要】</p><ul><li><p>使用Python操作符：以行为单位操作（参数必须是行），对所有行都有效。（类似于numpy中二维数组与一维数组的运算，但可能出现NaN）</p></li><li><p>使用pandas操作函数：</p><pre><code>axis=0：以列为单位操作（参数必须是列），对所有列都有效。axis=1：以行为单位操作（参数必须是行），对所有行都有效。</code></pre></li></ul><p><strong>三 . 处理丢失数据</strong></p><p>​ numpy 中：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">有两种丢失数据  ： None      np.<span class="built_in">nan</span>(NaN)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span>None</span><br><span class="line"></span><br><span class="line">         None是Python自带的，其类型为python object。因此，None不能参与到任何计算中。</span><br><span class="line"></span><br><span class="line">         object类型的运算要比int类型的运算慢得多  </span><br><span class="line"></span><br><span class="line">         计算不同数据类型求和时间  </span><br><span class="line"></span><br><span class="line">         <span class="comment">%timeit np.arange(1e5,dtype=xxx).sum()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="number">2.</span>np.<span class="built_in">nan</span>(NaN)</span><br><span class="line"></span><br><span class="line">         np.<span class="built_in">nan</span>是浮点类型，能参与到计算中。但计算的结果总是NaN。</span><br><span class="line"></span><br><span class="line">         但可以使用np.<span class="built_in">nan</span>*()函数来计算<span class="built_in">nan</span>，此时视<span class="built_in">nan</span>为<span class="number">0</span>。</span><br></pre></td></tr></table></figure><p>pandas中None和np.nan都视作np.nan</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子  ：df = DataFrame([[<span class="number">10</span>,<span class="number">20</span>,<span class="number">57</span>,np.nan,None],</span><br><span class="line">                [<span class="number">22</span>,<span class="number">33</span>,<span class="number">56</span>,<span class="number">12</span>,None],</span><br><span class="line">                [np.nan,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]], index = <span class="type">list</span>(<span class="string">"abc"</span>),</span><br><span class="line">              columns = [<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"数学"</span>,<span class="string">"物理"</span>,<span class="string">"H5"</span>])</span><br><span class="line">#三行五列</span><br><span class="line">df</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Python</th><th>JAVA</th><th>数学</th><th>物理</th><th>H5</th></tr></thead><tbody><tr><td>a</td><td>10.0</td><td>20</td><td>57</td><td>NaN</td><td>NaN</td></tr><tr><td>b</td><td>22.0</td><td>33</td><td>56</td><td>12.0</td><td>NaN</td></tr><tr><td>c</td><td>NaN</td><td>1</td><td>2</td><td>3.0</td><td>4.0</td></tr></tbody></table><p>pandas中None与np.nan的操作</p><p>​ isnull()</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：<span class="selector-tag">isnull</span>()<span class="selector-class">.any</span>()     查看数据  行或者列  是否有空值</span><br></pre></td></tr></table></figure><p>​ notnull()</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：  isnull和<span class="built_in">any</span> 使用     notnull和<span class="built_in">all</span>使用</span><br></pre></td></tr></table></figure><p>​ dropna() 过滤丢失数据</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数  <span class="attr">how</span>  = <span class="string">"all"</span>   axis</span><br></pre></td></tr></table></figure><p>​ fillna() 填冲充丢数据</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以选择前向填充还是后向填充</span><br><span class="line">前  :df3.fillna(<span class="function"><span class="keyword">method</span>="<span class="title">ffill</span>")     #<span class="title">forward</span></span></span><br><span class="line"><span class="function">后  :</span>df3.fillna(<span class="function"><span class="keyword">method</span>="<span class="title">bfill</span>")      #<span class="title">back</span></span></span><br><span class="line"><span class="function">左  :</span> df3.fillna(<span class="function"><span class="keyword">method</span>="<span class="title">bfill</span>",<span class="title">axis</span> = 1)   </span></span><br><span class="line"><span class="function">右  :</span>df3.fillna(<span class="function"><span class="keyword">method</span>="<span class="title">ffill</span>",<span class="title">axis</span> = 1)</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扩展</span></span><br><span class="line"><span class="attr">cond</span> = (df3 &gt;= <span class="number">10</span>).all(axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="6-pandas层次化索引"><a href="#6-pandas层次化索引" class="headerlink" title="6.pandas层次化索引"></a>6.pandas层次化索引</h2><p>​ 1.创建多层行索引</p><p>​ (1) 隐式构造</p><p>​ 最常见的方法是给DataFrame构造函数的index参数传递两个或者更多的数组</p><p>​</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#隐式创建</span><br><span class="line">s = <span class="symbol">Series</span>(data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"a"</span>], </span><br><span class="line">          index = [[<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>],[<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>]])</span><br><span class="line">s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二层索引</span><br><span class="line">df = <span class="symbol">DataFrame</span>(data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"a"</span>],</span><br><span class="line">               index = [[<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>],[<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>]],</span><br><span class="line">              columns = [<span class="string">"Python"</span>])</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三层索引</span><br><span class="line">df = <span class="symbol">DataFrame</span>(data = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size = <span class="number">8</span>),</span><br><span class="line">              index = [[<span class="string">'a'</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>],</span><br><span class="line">                       [<span class="string">'期中'</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期末"</span>,<span class="string">'期中'</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期末"</span>],</span><br><span class="line">                       [<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>]],</span><br><span class="line">              columns = [<span class="string">"Python"</span>])</span><br></pre></td></tr></table></figure><p>​ (2)显示构造pd.MultiIndex</p><ul><li><p>​ 使用数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df1 = DataFrame(data = np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">0</span>,<span class="number">150</span>,size = (<span class="number">8</span>,<span class="number">4</span>)),</span><br><span class="line">               index = pd<span class="selector-class">.MultiIndex</span><span class="selector-class">.from_arrays</span>([[<span class="string">'a'</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>],</span><br><span class="line">                       [<span class="string">'期中'</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期末"</span>,<span class="string">'期中'</span>,<span class="string">"期中"</span>,<span class="string">"期末"</span>,<span class="string">"期末"</span>],</span><br><span class="line">                       [<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>,<span class="string">"一单元"</span>,<span class="string">"二单元"</span>]]),</span><br><span class="line">               <span class="attribute">columns</span> = [<span class="string">"Python"</span>,<span class="string">"h5"</span>,<span class="string">"php"</span>,<span class="string">"go"</span>])</span><br><span class="line">df1</span><br></pre></td></tr></table></figure></li><li><p>使用tuple</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df3 = DataFrame(<span class="name">np</span>.random.randint(<span class="number">0</span>,<span class="number">150</span>,size = <span class="number">4</span>), </span><br><span class="line">                index = pd.MultiIndex.from_tuples([(<span class="string">"a"</span>,<span class="number">1</span>),(<span class="string">"a"</span>,<span class="number">2</span>),(<span class="string">"b"</span>,<span class="number">1</span>),(<span class="string">"b"</span>,<span class="number">2</span>)]),</span><br><span class="line">               columns = [<span class="string">"Python"</span>])</span><br><span class="line">df3</span><br></pre></td></tr></table></figure></li><li><p>使用product (最简单，推荐使用)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df4 = DataFrame(np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">0</span>,<span class="number">150</span>,size = (<span class="number">8</span>,<span class="number">2</span>)),</span><br><span class="line">                index = pd<span class="selector-class">.MultiIndex</span><span class="selector-class">.from_product</span>([list(<span class="string">"abcd"</span>), [<span class="string">"期中"</span>,<span class="string">"期末"</span>]]),</span><br><span class="line">               <span class="attribute">columns</span> = [<span class="string">'Python'</span>,<span class="string">"数学"</span>])</span><br><span class="line">df4</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ol start="2"><li><p>多层列索引</p><p>​ 除了行索引index ,列索引columns也能用同样的方法创建多层索引</p></li><li><p>多层索引对象的索引与切片操作</p><p>​ (1) 对于Series来说：直接中括号[]与使用.loc()完全一样,因此推荐使用中括号索引和括号</p><p>​</p><p>​ <strong>（2）</strong> <strong>DataFrame的操作</strong></p><p>​ . 可以直接使用列名称来进行索引</p><p>​ . 使用行索引需要ix( ) , loc() 函数 推荐使用loc()函数</p><p>注意在对行索引的时候，若一级行索引还有多个，对二级行索引会遇到问题！也就是说，无法直接对二级索引进行索引，必须让二级索引变成一级索引后才能对其进行索引！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df4[<span class="string">"Python"</span>][<span class="symbol">"a","期末"</span>]</span><br><span class="line"></span><br><span class="line">df4.loc[<span class="string">"a"</span>].loc[<span class="string">"期末"</span>][<span class="symbol">"Python"</span>]</span><br></pre></td></tr></table></figure></li><li><p>索引的堆</p><p>stack( level = * )</p><p>【小技巧】使用stack()的时候，level等于哪一个，哪一个就消失，出现在行里。</p><p>​ unstack()</p><p>​【小技巧】使用unstack()的时候，level等于哪一个，哪一个就消失，出现在列里。</p></li><li><p>聚合操作</p><p>【注意】</p><ul><li><p>需要指定axis</p></li><li><p>【小技巧】和unstack()相反，聚合的时候，axis等于哪一个，哪一个就保留。</p><p>所谓的聚合操作：平均数，方差，最大值，最小值……</p></li></ul><p>​</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df4.<span class="keyword">div</span>(<span class="number">10</span>, axis = <span class="string">"index"</span>)</span><br><span class="line">df4.<span class="keyword">sum</span>(axis = <span class="number">1</span>)</span><br><span class="line">df4.std()        <span class="meta">#标准差：表示的是数据的离散程度</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>pandas 的拼接操作</p><p>​ 级联 ： pd.concat pd.append(追加，只能行追加)</p><p>​ 合并 ： pd.merge ,pd.join</p><p>​</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.concat  = <span class="params">(objs ,<span class="attr">axis</span> = 0,<span class="attr">join</span>='outer' ,<span class="attr">join_axes</span>=None,<span class="attr">ignore_index</span>=False,<span class="attr">keys</span>=None,<span class="attr">levels</span>=None,<span class="attr">names</span>=None,</span></span><br><span class="line"><span class="params"><span class="attr">verify_integrity</span> =False,<span class="attr">copy</span>= True)</span></span><br></pre></td></tr></table></figure><p>| 参数 | 说明 |<br>| —————- | —————————————- |<br>| objs | 参与连接的列表或字典，且列表或字典里的对象是pandas数据类型，唯一必须给定的参数 |<br>| axis=0 | 指明连接的轴向，0是纵轴，1是横轴，默认是0 |<br>| join | ‘inner’（交集）内链接，‘outer’（并集）外连接，默认是‘outer’指明轴向索引的索引是交集还是并集 |<br>| join_axis | 指明用于其他n-1条轴的索引（层次化索引，某个轴向有多个索引），不执行交并集 |<br>| keys | 与连接对象有关的值，用于形成连接轴向上的层次化索引（外层索引），可以是任意值的列表或数组、元组数据、数组列表（如果将levels设置成多级数组的话） |<br>| levels | 指定用作层次化索引各级别（内层索引）上的索引，如果设置keys的话 |<br>| names | 用于创建分层级别的名称，如果设置keys或levels的话 |<br>| verify_integrity | 检查结果对象新轴上的重复情况，如果发横则引发异常，默认False，允许重复 |<br>| ignore_index | 不保留连接轴上的索引，产生一组新索引range（total_length） |</p><p>​</p><p>pd.merge() 函数参数</p><p>一对一，一对多，多对多</p><p>| 参数 | 说明 |<br>| ———– | —————————————- |<br>| left | 参与合并的左侧DataFrame |<br>| right | 参与合并的右侧DataFrame |<br>| how | 连接方式：‘inner’（默认）；还有，‘outer’、‘left’、‘right’ |<br>| on | 用于连接的列名，必须同时存在于左右两个DataFrame对象中，如果位指定，则以left和right列名的交集作为连接键 |<br>| left_on | 左侧DataFarme中用作连接键的列 |<br>| right_on | 右侧DataFarme中用作连接键的列 |<br>| left_index | 将左侧的行索引用作其连接键 |<br>| right_index | 将右侧的行索引用作其连接键 |<br>| sort | 根据连接键对合并后的数据进行排序，默认为True。有时在处理大数据集时，禁用该选项可获得更好的性能 |<br>| suffixes | 字符串值元组，用于追加到重叠列名的末尾，默认为（‘_x’,‘_y’）.例如，左右两个DataFrame对象都有‘data’，则结果中就会出现‘data_x’，‘data_y’ |<br>| | |</p></li></ol><p>​ set_index() 、重新设置行索引</p><p>​ query() 查询</p><h2 id="7-pandas数据处理"><a href="#7-pandas数据处理" class="headerlink" title="7.pandas数据处理"></a>7.pandas数据处理</h2><p>1.删除重复元素</p><p>​ 使用duplicated()函数检测重复的行，返回元素为布尔类型的Series对象，每个元素对应一行，如果该行不是第一次出现，则元素为True</p><p>​ 使用drop_duplicates()函数删除重复的行</p><ol start="2"><li><p>映射</p><p>​ 映射的含义：创建一个映射关系列表，把values元素和一个特定的标签或者字符串绑定</p><p>需要使用字典：</p><p>map = {</p><pre><code>&apos;label1&apos;:&apos;value1&apos;,&apos;label2&apos;:&apos;value2&apos;,...}</code></pre><p>`</p><p>包含三种操作：</p><ul><li><p>replace()函数：替换元素</p></li><li><p>最重要：map()函数：新建一列</p><p>​ 由已有的列生成新的一列 map()函数中可以使用lambda函数 函数还可以传 一个回调函数 transform()和map()类似</p></li><li><p>rename()函数：替换索引</p></li></ul><p>​</p></li><li><p>异常值检测和处理</p></li></ol><p>​ #对数据进行过滤#std标准差，主要是看数据的稳定性</p><p>​ 删除特定索引df.drop(labels,inplace = True)</p><p>​ 4.排序</p><p>​ (1）使用.take()函数排序，</p><p>​ df. take([2,4,5] ) 根据索引取值</p><p>​ （2) 可以借助np.random.permutation()函数随机排序</p><p>​ (3)当DataFrame规模足够大时，直接使用np.random.randint()函数，就配合take()函数实现随机抽样</p><ol start="5"><li><p><strong>数据聚合【重点】</strong></p><p>数据聚合是数据处理的最后一步，通常是要使每一个数组生成一个单一的数值。</p><p>数据分类处理：</p><ul><li>分组：先把数据分为几组</li><li>用函数处理：为不同组的数据应用不同的函数以转换数据</li><li>合并：把不同组得到的结果合并起来</li></ul><p>数据分类处理的核心：</p><pre><code>groupby()函数 分组            groupby 之后，是聚合操作</code></pre></li><li><p>高级数据集合(不用)</p><p>​ ### 可以使用transform和apply实现相同功能</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.groupby([<span class="string">"color"</span>]).<span class="built_in">transform</span>(<span class="built_in">sum</span>)</span><br><span class="line">df.groupby([<span class="string">"color"</span>])[[<span class="string">"price"</span>,<span class="string">"weight"</span>]].<span class="built_in">apply</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></li><li><p>Series和DataFrame都有一个用于生成各类图表的plot方法。默认情况下，它们所生成的是线形图(不重)</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = Series([80,82,97,89,78,73,66], name = <span class="string">"数学"</span>, index = <span class="keyword">list</span>(<span class="string">"abcdefg"</span>))</span><br><span class="line"><span class="built_in">s</span></span><br><span class="line">线性图： s.<span class="keyword">plot</span>()         柱状图：s.<span class="keyword">plot</span>(kind = <span class="string">"bar"</span>)   barh(反向) </span><br><span class="line">横坐标没dx ，不会支持中文</span><br><span class="line"></span><br><span class="line">DataFrame: df.<span class="keyword">plot</span>()</span><br></pre></td></tr></table></figure><p>直方图</p></li></ol><p>​ 直方图，是一种特殊形状的柱状图 直方图又叫密度图</p><p>​ s.hist(bins = 20)</p><p>​ bins 取值 1:1-1:2</p><p>​ 随机数百分比密度图 s.plot(kind = ‘kde’)#kde 内核： 专门画密度图的</p><p>​ 这两种图表经常被画在一起。直方图以规格化形式给出（以便给出面元化密度），然后再在其上绘制核密度估计。接下来来看一个由两个不同的标准正态分布组成的的双峰分布</p><p>np.random.normal()正太分布函数</p><p>直方图hist，函数中必须添加属性normed = True</p><h2 id="8-scipy"><a href="#8-scipy" class="headerlink" title="8. scipy"></a>8. scipy</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scipy</span><span class="selector-class">.fftpack</span>模块用来计算快速傅里叶变换  </span><br><span class="line">速度比传统傅里叶变换更快，是对之前算法的改进  </span><br><span class="line">图片是二维数据，注意使用<span class="selector-tag">fftpack</span>的二维转变方法</span><br></pre></td></tr></table></figure><ol><li>使用傅里叶变换。把数据变成信号数据 fftpack.fft2()</li></ol><p>​ 反向傅里叶变换 fftpack.ifft2()</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">np</span><span class="selector-class">.real</span>()     <span class="selector-tag">plt</span><span class="selector-class">.figure</span>()   尺寸</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数值积分，求解圆周率</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="selector-tag">scipy</span><span class="selector-class">.integrate</span>进行积分，调用<span class="selector-tag">quad</span>()方法</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>scipy文件输入/输出</p><p>​ from scipy import io</p><p>​ 随机生成数组，使用scipy中的io.savemat()保存 文件格式是.mat，标准的二进制文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">io</span>.savemat(<span class="string">"./1811.mat"</span>, &#123;<span class="string">"nd"</span>:nd&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.loadmat(<span class="string">"./1811.mat"</span>)[<span class="string">"nd"</span>]       读取数据</span><br></pre></td></tr></table></figure></li><li><p>读写图片使用scipy中 misc.imread()/imsave()</p><p>​ misc.imrotate ( ) 旋转图片</p><p>​ .resize() , imfilter()</p></li><li><p>图片处理</p><p>​ ndimage 处理图片的包</p><p>​ 使用scipy.misc.face(gray=True)获取图片，使用ndimage移动坐标、旋转图片、切割图片、 缩放图片</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ndimage</span><span class="selector-class">.shift</span>()   移动坐标</span><br><span class="line"><span class="selector-tag">ndimage</span><span class="selector-class">.rotate</span>()  旋转图片</span><br><span class="line"><span class="selector-tag">ndimage</span><span class="selector-class">.zoom</span>()    缩放图片</span><br></pre></td></tr></table></figure><ol start="6"><li><p>图片进行过滤</p><p>添加噪声，对噪声图片使用ndimage中的高斯滤波、中值滤波、signal中维纳滤波进行处理<br>使图片变清楚</p></li></ol><h2 id="9-matplotlib"><a href="#9-matplotlib" class="headerlink" title="9.matplotlib"></a>9.matplotlib</h2><ol><li>Matplotlib基础知识： Matplotlib中的基本图表包括的元素</li></ol><ul><li><p>​ x轴和y轴<br>​ 水平和垂直的轴线</p><ul><li><p>​ x轴和y轴刻度<br>​ 刻度标示坐标轴的分隔，包括最小刻度和最大刻度</p><ul><li><p>​ x轴和y轴刻度标签<br>​ 表示特定坐标轴的值</p><ul><li>​ 绘图区域<br>​ 实际绘图的区域</li></ul></li></ul><p>(1) plt.plot(x,y,format_string,**kwargs)</p></li></ul></li></ul><p>​ x轴数据，y轴数据，format_string控制曲线的格式字串</p><p>​ format_string 由颜色字符，风格字符，和标记字符</p><p>​ **kwargs:第二组或更多，(x,y,format_string)</p><p>​</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">color:</span>控制颜色，color=’green’   </span><br><span class="line"></span><br><span class="line"><span class="symbol">linestyle:</span>线条风格，linestyle=’dashed’ </span><br><span class="line"></span><br><span class="line"><span class="symbol">marker:</span>标记风格，marker = ‘o’ </span><br><span class="line"></span><br><span class="line"><span class="symbol">markerfacecolor:</span>标记颜色，markerfacecolor = ‘blue’ </span><br><span class="line"></span><br><span class="line"><span class="symbol">markersize:</span>标记尺寸，markersize = ‘<span class="number">20</span>’</span><br></pre></td></tr></table></figure><p>plt.grid(True) #设置网格线</p><ul><li>lw代表linewidth，线的粗细</li><li><p>alpha表示线的明暗程度</p><p>plt.title() #标题</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fontsize设置字体大小，默认<span class="number">12</span>，可选参数 [<span class="string">'xx-small'</span>, <span class="string">'x-small'</span>, <span class="string">'small'</span>, <span class="string">'medium'</span>, <span class="string">'large'</span>,<span class="string">'x-large'</span>, <span class="string">'xx-large'</span>]</span><br><span class="line">fontweight设置字体粗细，可选参数 [<span class="string">'light'</span>, <span class="string">'normal'</span>, <span class="string">'medium'</span>, <span class="string">'semibold'</span>, <span class="string">'bold'</span>, <span class="string">'heavy'</span>, <span class="string">'black'</span>]</span><br><span class="line">fontstyle设置字体类型，可选参数[ <span class="string">'normal'</span> | <span class="string">'italic'</span> | <span class="string">'oblique'</span> ]，italic斜体，oblique倾斜</span><br><span class="line">verticalalignment设置水平对齐方式 ，可选参数 ： <span class="string">'center'</span> , <span class="string">'top'</span> , <span class="string">'bottom'</span> ,<span class="string">'baseline'</span> </span><br><span class="line">horizontalalignment设置垂直对齐方式，可选参数：<span class="keyword">left</span>,<span class="keyword">right</span>,<span class="keyword">center</span></span><br><span class="line">rotation(旋转角度)可选参数为:<span class="keyword">vertical</span>,horizontal 也可以为数字</span><br><span class="line">alpha透明度，参数值<span class="number">0</span>至<span class="number">1</span>之间</span><br><span class="line">backgroundcolor标题背景颜色</span><br><span class="line">bbox给标题增加外框 ，常用参数如下：</span><br><span class="line">   boxstyle方框外形</span><br><span class="line">   facecolor(简写fc)背景颜色</span><br><span class="line">   edgecolor(简写<span class="keyword">ec</span>)边框线条颜色</span><br><span class="line">   edgewidth边框线条大小</span><br></pre></td></tr></table></figure><p>plt.xlabel()/ylabel() #设置轴标签 参数：rotation 旋转度数</p><p>plt.legend(loc=’upper left’) #设置legend显示，并指定位置</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| 字符串       |</span> 数值      <span class="params">| 字符串   |</span>  数值 <span class="params">|</span></span><br><span class="line"><span class="params">|</span> <span class="symbol">:-------------</span>: <span class="params">|:-----------:|</span> <span class="symbol">:-----</span><span class="symbol">:|</span>  <span class="symbol">:-----</span><span class="symbol">:|</span></span><br><span class="line"><span class="params">| best        |</span>  <span class="number">0</span>        <span class="params">| center left   |</span>   <span class="number">6</span> <span class="params">|</span></span><br><span class="line"><span class="params">|</span> upper right    <span class="params">| 1        |</span> center right  <span class="params">|   7  |</span></span><br><span class="line"><span class="params">| upper left    |</span>  <span class="number">2</span>        <span class="params">| lower center  |</span>   <span class="number">8</span>  <span class="params">|</span></span><br><span class="line"><span class="params">|</span> lower left    <span class="params">|  3        |</span> upper center  <span class="params">|   9 |</span></span><br><span class="line"><span class="params">| lower right   |</span>  <span class="number">4</span>        <span class="params">| center      |</span>   <span class="number">10</span> <span class="params">|</span></span><br><span class="line"><span class="params">|</span> right       <span class="params">|  5        |</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ncol控制图例中有几列</span><br><span class="line"> mode = （可拉伸的）</span><br><span class="line"> bbox_to_anchor    (锚点)  例子： bbox_to_anchor= [o,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>.<span class="number">1</span>]  前两个值是坐标点，第三个值宽度，最后一个是距离y轴的距离       </span><br><span class="line"> facecolor  背景颜色</span><br></pre></td></tr></table></figure><p>plt.show() #显示图像</p><p>设置坐标轴范围</p><p>除了plt.axis方法，还可以通过xlim，ylim方法设置坐标轴范围</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加子视图</span><br><span class="line">axes1 = figure.add_subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)     #表示一行三列第一个</span><br></pre></td></tr></table></figure><p>​ 不同程度的破折线</p><p>​ dashes =[ ] #注意偶数</p><p>​</p><p>（2）保存图片</p><p>​ plt.savefig()</p><p>（3）三种设置方式</p><p>​ 1.向方法传入关键字参数</p><p>​ 2.使用setp()方法</p><p>​ 3 .对实例使用一系列的setter方法</p><p>(4) x,y轴坐标刻度</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locs, labels = plt.xticks<span class="params">()</span> <span class="comment"># 不传入任何参数，xticks()会返回当前刻度的位置和标签</span></span><br><span class="line"></span><br><span class="line">Π，α，β，<span class="params">----</span>》 [<span class="string">"$\pi$"</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p>2D图形</p><p>(1) 直方图</p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:17 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;数据分析&quot;&gt;&lt;a href=&quot;#数据分析&quot; class=&quot;headerlink&quot; title=&quot;数据分析&quot;&gt;&lt;/a&gt;数据分析&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://linchao1002.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://linchao1002.github.io/tags/Python/"/>
    
      <category term="数据分析" scheme="https://linchao1002.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="numpy" scheme="https://linchao1002.github.io/tags/numpy/"/>
    
      <category term="matoplotlib可视化" scheme="https://linchao1002.github.io/tags/matoplotlib%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="pandas" scheme="https://linchao1002.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>hexo网站时间修改</title>
    <link href="https://linchao1002.github.io/2018/08/23/hexo%E7%BD%91%E7%AB%99%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/"/>
    <id>https://linchao1002.github.io/2018/08/23/hexo网站时间修改/</id>
    <published>2018-08-23T12:14:49.000Z</published>
    <updated>2019-02-19T09:51:54.914Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h1 id="HEXO-网站时间修改"><a href="#HEXO-网站时间修改" class="headerlink" title="HEXO 网站时间修改"></a>HEXO 网站时间修改</h1><ul><li><h4 id="网站建立时间"><a href="#网站建立时间" class="headerlink" title="网站建立时间"></a>网站建立时间</h4></li></ul><p>​ 这个时间将在站点的底部显示，例如 © 2017 - 2018。 编辑 主题配置文件，<code>_config.yml</code>搜索 <code>since</code></p><p>​ 修改参数即可</p><ul><li><h4 id="网站已运行时间"><a href="#网站已运行时间" class="headerlink" title="网站已运行时间"></a>网站已运行时间</h4></li></ul><h4 id="编辑主题源文件"><a href="#编辑主题源文件" class="headerlink" title="编辑主题源文件"></a>编辑主题源文件</h4><p><code>./themes/layout/_parrials/footer.swing</code></p><p>找到以下代码区块</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.footer.theme.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">/* ... */</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">HLJS | COPY</span></span><br></pre></td></tr></table></figure><p>在 <code>&lt;/div&gt;</code> 之前添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>   |   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"showDays"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">LANG-HTML | COPY</span><br></pre></td></tr></table></figure><p>在该文件末尾处添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> birthDay = <span class="built_in">Date</span>.UTC(<span class="number">2016</span>,<span class="number">07</span>,<span class="number">30</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>); <span class="comment">// 这里设置建站时间</span></span></span><br><span class="line"><span class="actionscript">  setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todayYear = today.getFullYear();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todayMonth = today.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todayDate = today.getDate();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todayHour = today.getHours();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todayMinute = today.getMinutes();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> todaySecond = today.getSeconds();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> diff = now - birthDay;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff/years);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff/days)-diffYears*<span class="number">365</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'showDays'</span>).innerHTML=<span class="string">"本站已运行 "</span>+diffYears+<span class="string">" 年 "</span>+diffDays+<span class="string">" 天 "</span>+diffHours+<span class="string">" 小时 "</span>+diffMinutes+<span class="string">" 分钟 "</span>+diffSeconds+<span class="string">" 秒"</span>;</span></span><br><span class="line"><span class="undefined">  &#125;, 1000);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;HEXO-网站时间修改&quot;&gt;&lt;a href=&quot;#HEXO-网站时间修改&quot; class=&quot;headerlink&quot; title=&quot;HEXO 
      
    
    </summary>
    
      <category term="Hexo" scheme="https://linchao1002.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linchao1002.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://linchao1002.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Next主题个性化之自动更换背景图片</title>
    <link href="https://linchao1002.github.io/2018/01/25/Next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>https://linchao1002.github.io/2018/01/25/Next主题个性化之自动更换背景图片/</id>
    <published>2018-01-25T12:14:49.000Z</published>
    <updated>2019-02-18T10:47:48.810Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h2 id="Next主题个性化之自动更换背景图片"><a href="#Next主题个性化之自动更换背景图片" class="headerlink" title="Next主题个性化之自动更换背景图片"></a>Next主题个性化之自动更换背景图片</h2><p>如果觉得next的空白主题看腻了或者太多人用觉得不够个性化，那么不妨试试自动更新背景图片（简单且酷）。</p><p>实现的原理：调用了网站的接口。<br>自动更换背景的实现是修改添加背景的css样式实现。图片来源是 ：<a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a></p><p>这个网站，里面不仅免费提供了很多高清美图，而且还提供api接口调用，实在是良心。<br><a id="more"></a></p><h6 id="1-修改背景样式"><a href="#1-修改背景样式" class="headerlink" title="1 .修改背景样式"></a>1 .修改背景样式</h6><p>修改themes\next\source\css\ _custom\custom.styl文件，这个是Next故意留给用户自己个性化定制一些样式的文件，添加以下代码：</p><p>body {<br>background:url(<a href="https://source.unsplash.com/random/1600x900)" target="_blank" rel="noopener">https://source.unsplash.com/random/1600x900)</a>;<br>background-repeat: no-repeat;<br>background-attachment:fixed;<br>background-position:50% 50%;<br>}<br>如果自己不喜欢这个网址提供的图片做背景，那么修改url()里面的路径即可。repeat、attachment、position就是调整图片的位置，不重复出现、不滚动等等。</p><h6 id="2-修改不透明度"><a href="#2-修改不透明度" class="headerlink" title="2.修改不透明度"></a>2.修改不透明度</h6><p>完成这一步其实背景就会自动更换了，但是会出现一个问题，因为next主题的背景是纯透明的，这样子就造成背景图片的影响看不见文字，这对于博客来说肯定不行。</p><p>那么就需要调整背景的不透明度了。同样是修改themes\next\source\css\ _custom\custom.styl文件。在后面添加如下代码</p><p>body {<br>background:url(<a href="https://source.unsplash.com/random/1600x900)" target="_blank" rel="noopener">https://source.unsplash.com/random/1600x900)</a>;<br>background-repeat: no-repeat;<br>background-attachment:fixed;<br>background-position:50% 50%;<br>}</p><p>.content-wrap {<br>opacity: 0.86;<br>}</p><p>(实际需要根据选择的主题来添加)</p><p>然后 hexo clean hexo g hexo d 便可以实现了</p><p>参考链接：<a href="https://blog.csdn.net/mango_haoming/article/details/78473243" target="_blank" rel="noopener">https://blog.csdn.net/mango_haoming/article/details/78473243</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Next主题个性化之自动更换背景图片&quot;&gt;&lt;a href=&quot;#Next主题个性化之自动更换背景图片&quot; class=&quot;headerlink&quot; title=&quot;Next主题个性化之自动更换背景图片&quot;&gt;&lt;/a&gt;Next主题个性化之自动更换背景图片&lt;/h2&gt;&lt;p&gt;如果觉得next的空白主题看腻了或者太多人用觉得不够个性化，那么不妨试试自动更新背景图片（简单且酷）。&lt;/p&gt;&lt;p&gt;实现的原理：调用了网站的接口。&lt;br&gt;自动更换背景的实现是修改添加背景的css样式实现。图片来源是 ：&lt;a href=&quot;https://source.unsplash.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://source.unsplash.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这个网站，里面不仅免费提供了很多高清美图，而且还提供api接口调用，实在是良心。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://linchao1002.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linchao1002.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://linchao1002.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>IT 项目开发流程</title>
    <link href="https://linchao1002.github.io/2017/12/23/Work/"/>
    <id>https://linchao1002.github.io/2017/12/23/Work/</id>
    <published>2017-12-23T12:14:49.000Z</published>
    <updated>2019-02-19T09:53:34.998Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h1 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h1><h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><ul><li>产品经理<ul><li>PRD</li><li>原型图</li></ul></li><li>开会<ul><li>项目评估</li><li>能不能做</li><li>多长时间做出来</li><li>有什么风险</li></ul></li><li>UI</li><li>DBA<ul><li>数据库工程师</li><li>设计库，表</li></ul></li><li>后台<ul><li>设计库，设计表</li><li>封装Api</li></ul></li><li>送测</li><li>提交Bug</li><li>修改Bug</li><li>上Staging<ul><li>演示环境</li></ul></li><li>上线<ul><li>凌晨三点</li></ul></li><li>版本迭代</li></ul><h3 id="未雨绸缪"><a href="#未雨绸缪" class="headerlink" title="未雨绸缪"></a>未雨绸缪</h3><ul><li>研究那些将使用但是还没有使用过的技术</li></ul><h3 id="协作工具"><a href="#协作工具" class="headerlink" title="协作工具"></a>协作工具</h3><ul><li>文档协作<ul><li>Google Document</li><li>有道云协作</li><li>Trello</li></ul></li><li>版本控制<ul><li>Git</li><li>代码托管仓库<ul><li>GitHub</li><li>码云</li><li>gerrit</li><li>gitlab</li></ul></li></ul></li><li>Bug反馈平台<ul><li>Bugzilla<ul><li>用户，用户组</li><li>可以按照应用分配bug</li><li>为bug分级</li><li>追踪bug</li></ul></li><li>Bugly</li></ul></li><li>持续集成<ul><li>Jenkins</li></ul></li><li>OA<ul><li>管理员工出勤，请假</li><li>打卡打指纹</li><li>刷脸</li><li>钉钉</li></ul></li><li>邮件系统<ul><li>企业邮箱</li><li>记录</li></ul></li></ul><h3 id="项目活跃度"><a href="#项目活跃度" class="headerlink" title="项目活跃度"></a>项目活跃度</h3><ul><li>统计工具<ul><li>自己通过中间件实现</li><li>专门的统计平台实现<ul><li>友盟统计</li><li>百度统计</li><li>xxx统计</li></ul></li></ul></li><li>统计工具</li></ul><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><ul><li>淘票票<ul><li>用户端<ul><li>用户系统<ul><li>纯自己打造</li><li>用户注册来的</li></ul></li><li>电影系统<ul><li>属于后台管理的</li><li>跳转到选座购票<ul><li>根据时间，根据电影名，根据区域，筛选排期</li><li>拿着电影ID去电影院中的排档表筛选</li></ul></li></ul></li><li>影院系统<ul><li>属于后台管理的</li><li>对影院的区域级联筛选，再加评分和综合排序</li><li>跳转到选座购票<ul><li>影院已经确定</li><li>可以根据时间和电影去排档中筛选</li></ul></li></ul></li><li>购票<ul><li>选座系统</li><li>对应的是排档，<ul><li>排档中包含影厅，影厅包含座位布局</li><li>座位状态确定<ul><li>根据订单来修改座位状态<ul><li>已支付订单 status = 2 已支付</li></ul></li><li>懒修改来管理锁单<ul><li>查询锁单订单 status=0 已下单未付款，继续根据时间节点进行联合查询</li></ul></li></ul></li></ul></li></ul></li><li>订单<ul><li>将座位号，排档，用户发送给服务器生成订单<ul><li>十五分钟过期</li><li>有时间戳，当前时间 + 十五分钟</li></ul></li><li>锁单<ul><li>真实订单，只不过订单未支付，并且未锁单</li></ul></li></ul></li><li>支付系统<ul><li>内嵌支付宝</li><li>调用第三方支付宝</li></ul></li><li>积分系统</li><li>点评系统</li></ul></li><li>电影院端<ul><li>用户系统<ul><li>电影院注册</li></ul></li><li>电影系统<ul><li>后台管理的</li></ul></li><li>放映厅<ul><li>影院自己的</li></ul></li><li>排档<ul><li>影厅 + 电影 + 时间 + 影院</li></ul></li><li>售票<ul><li>和用户的订单生成是一样的</li><li>只不过订单的用户是default</li></ul></li></ul></li><li>后台管理<ul><li>客户端用户系统<ul><li>只是辅助维护</li></ul></li><li>电影院用户<ul><li>辅助维护，认证，信息修改需要后端认证</li></ul></li><li>电影系统<ul><li>淘宝直接对接的</li></ul></li><li>订单系统<ul><li>都可以查看</li></ul></li></ul></li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Work&quot;&gt;&lt;a href=&quot;#Work&quot; class=&quot;headerlink&quot; title=&quot;Work&quot;&gt;&lt;/a&gt;Work&lt;/h1&gt;
      
    
    </summary>
    
      <category term="IT" scheme="https://linchao1002.github.io/categories/IT/"/>
    
    
      <category term="IT" scheme="https://linchao1002.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>面试中的公共问题</title>
    <link href="https://linchao1002.github.io/2017/01/02/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%85%AC%E5%85%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://linchao1002.github.io/2017/01/02/面试中的公共问题/</id>
    <published>2017-01-01T16:00:00.000Z</published>
    <updated>2019-03-14T10:40:18.314Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --><h2 id="面试中的公共问题"><a href="#面试中的公共问题" class="headerlink" title="面试中的公共问题"></a>面试中的公共问题</h2><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><ol><li><p>TCP/IP模型相关问题。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">《互联网协议入门（一）》</a>和<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">《互联网协议入门（二）》</a>。</p></blockquote></li><li><p>HTTP和HTTPS相关问题。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">《HTTP 协议入门》</a>和<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">《SSL/TLS协议运行机制的概述》</a>。</p></blockquote></li><li><p>Linux常用命令和服务。</p></li><li><p>进程和线程之间的关系。什么时候用多线程？什么时候用多进程？。</p></li><li><p>关系型数据库相关问题（ACID、事务隔离级别、锁、SQL优化）。</p></li><li><p>非关系型数据库相关问题（CAP/BASE、应用场景）。</p></li></ol><h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><ol><li><p>开发中用过哪些标准库和三方库。</p><blockquote><p>标准库：sys / os / re / math / random / logging / json / pickle / shelve / socket / datetime / hashlib / configparser / urllib / itertools / collections / functools / threading / multiprocess / timeit / atexit / abc / asyncio / base64 / concurrent.futures / copy / csv / operator / enum / heapq / http / profile / pstats / ssl / unitest / uuid</p></blockquote></li><li><p>装饰器的作用、原理和实现。</p></li><li><p>使用过哪些魔法方法。</p><blockquote><p>建议阅读<a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html" target="_blank" rel="noopener">《Python魔术方法指南》</a>。</p></blockquote></li><li><p>生成式、生成器、迭代器的编写。</p></li><li><p>列表、集合、字典的底层实现。</p></li><li><p>垃圾回收相关问题。</p></li><li><p>并发编程的相关问题。</p></li><li><p>协程和异步I/O相关知识。</p></li></ol><h3 id="Django和Flask"><a href="#Django和Flask" class="headerlink" title="Django和Flask"></a>Django和Flask</h3><ol><li><p>MVC架构（MTV）解决了什么问题。</p></li><li><p>中间件的执行流程以及如何自定义中间件。</p></li><li><p>REST数据接口如何设计（URL、域名、版本、过滤、状态码、安全性）。</p><blockquote><p>建议阅读阮一峰的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">《RESTful API设计指南》</a>。</p></blockquote></li><li><p>使用ORM框架实现CRUD操作的相关问题。</p><ul><li>如何实现多条件组合查询 / 如何执行原生的SQL / 如何避免N+1查询问题</li></ul></li><li><p>如何执行异步任务和定时任务。</p></li><li><p>如何实现页面缓存和查询缓存？缓存如何预热？</p></li></ol><h3 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h3><ol><li>Scrapy框架的组件和数据处理流程。</li><li>爬取的目的（项目中哪些地方需要用到爬虫的数据）。</li><li>使用的工具（抓包、下载、清理、存储、分析、可视化）。</li><li>数据的来源（能够轻松的列举出10个网站）。</li><li>数据的构成（抓取的某个字段在项目中有什么用）。</li><li>反反爬措施（限速、请求头、Cookie池、代理池、Selenium、PhantomJS、RoboBrowser、TOR、OCR）。</li><li>数据的体量（最后抓取了多少数据，多少W条数据或多少个G的数据）。</li><li>后期数据处理（持久化、数据补全、归一化、格式化、转存、分类）。</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>科学运算函数库（SciPy和NumPy常用运算）。</li><li>数据分析库（Pandas中封装的常用算法）。</li><li>常用的模型及对应的场景（分类、回归、聚类）。</li><li>提取了哪些具体的指标。</li><li>如何评价模型的优劣。</li><li>每种模型实际操作的步骤，对结果如何评价。</li></ol><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ol><li>项目团队构成以及自己在团队中扮演的角色（在项目中的职责）。</li><li>项目的业务架构（哪些模块及子模块）和技术架构（移动端、PC端、后端技术栈）。</li><li>软件控制管理相关工具（版本控制、问题管理、持续集成）。</li><li>核心业务实体及其属性，实体与实体之间的关系。</li><li>用到哪些依赖库，依赖库主要解决哪方面的问题。</li><li>项目如何部署上线以及项目的物理架构（Nginx、Gunicorn/uWSGI、Redis、MongoDB、MySQL、Supervisor等）。</li><li>如何对项目进行测试，有没有做过性能调优。</li><li>项目中遇到的困难有哪些，如何解决的。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Mar 16 2019 20:42:16 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;面试中的公共问题&quot;&gt;&lt;a href=&quot;#面试中的公共问题&quot; class=&quot;headerlink&quot; title=&quot;面试中的公共问题&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="面试" scheme="https://linchao1002.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://linchao1002.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="python" scheme="https://linchao1002.github.io/tags/python/"/>
    
  </entry>
  
</feed>
